{"version":3,"sources":["InfoBox.jsx","util.jsx","Map.jsx","Table.jsx","LineGraph.jsx","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","props","Card","className","styles","flex","onClick","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","prettyPrintStat","stat","numeral","format","sortData","data","sortedData","sort","a","b","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","console","log","ChangeView","zoom","useMap","setView","Map","MapContainer","TileLayer","url","attribution","Table","countries","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","chartData","lineData","lastDataPoint","chartType","dataPoints","tempData","date","currValue","x","y","push","LineGraph","useState","setdata","useEffect","fetch","then","response","json","datas","chrtData","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapData","setMapData","setCasesType","name","iso2","getCountries","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kYAoBeA,MAff,YAAmD,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,MAAUC,EAAQ,yCAC9C,OACI,8BACI,cAACC,EAAA,EAAD,CAAMC,UAAU,UAAUC,OAAQ,CAACC,KAAM,IAAMC,QAASL,EAAMK,QAA9D,SACI,eAACC,EAAA,EAAD,WACA,cAACC,EAAA,EAAD,CAAYL,UAAU,iBAAiBM,MAAM,gBAA7C,SAA8DX,IAC9D,qBAAIK,UAAU,iBAAd,UAAgCJ,EAAhC,kBACA,eAACS,EAAA,EAAD,CAAYL,UAAU,iBAAiBM,MAAM,gBAA7C,UAA8DT,EAA9D,oB,sECRVU,EAAkB,CACtBX,MAAO,CACLY,IAAK,UACLC,WAAY,KAEdC,UAAW,CACTF,IAAK,UACLC,WAAY,KAEdE,OAAQ,CACNH,IAAK,UACLC,WAAY,MAIHG,EAAkB,SAACC,GAAD,OAC7BA,EAAI,WAAOC,IAAQD,GAAME,OAAO,SAAY,MAEjCC,EAAW,SAACC,GACrB,IAAMC,EAAU,YAAOD,GAKvB,OAHAC,EAAWC,MAAK,SAACC,EAAGC,GAChB,OAAOD,EAAExB,MAAQyB,EAAEzB,OAAQ,EAAG,KAE3BsB,GAGEI,EAAgB,SAACL,GAAD,IAAOM,EAAP,uDAAmB,QAAnB,OAC3BN,EAAKO,KAAI,SAACC,GAAD,OACP,cAACC,EAAA,EAAD,CACEC,OAAQ,CAACF,EAAQG,YAAYC,IAAKJ,EAAQG,YAAYE,MACtDxB,MAAOC,EAAgBgB,GAAWf,IAClCuB,UAAWxB,EAAgBgB,GAAWf,IACtCwB,YAAa,GACbC,OACEC,KAAKC,KAAKV,EAAQF,IAAchB,EAAgBgB,GAAWd,WAN/D,SASG2B,QAAQC,IAAI9B,EAAgBgB,GAAWf,WCrC9C,SAAS8B,EAAT,GAAuC,IAAjBX,EAAgB,EAAhBA,OAAQY,EAAQ,EAARA,KAG1B,OAFYC,cACRC,QAAQd,EAAQY,GACb,KAqBIG,MAlBf,YAA+C,IAAjCf,EAAgC,EAAhCA,OAAQY,EAAwB,EAAxBA,KAAMtB,EAAkB,EAAlBA,KAAMM,EAAY,EAAZA,UAC9B,OACI,sBAAKvB,UAAU,MAAf,UACKoC,QAAQC,IAAIpB,GACb,eAAC0B,EAAA,EAAD,CAAchB,OAAQA,EAAQY,KAAMA,EAApC,UACA,cAACK,EAAA,EAAD,CACAC,IAAI,qDACJC,YAAY,2EAEZ,cAACR,EAAD,CAAaX,OAAQA,EAAQY,KAAMA,IAClCjB,EAAcL,EAAMM,U,OCClBwB,MAlBf,YAA6B,IAAbC,EAAY,EAAZA,UACZ,OACI,qBAAKhD,UAAU,QAAf,SAEQgD,EAAUxB,KAAI,gBAAEC,EAAF,EAAEA,QAAS7B,EAAX,EAAWA,MAAX,OACd,+BACI,6BAAK6B,IACT,mCAAK,iCAASX,IAAQlB,GAAOmB,OAAO,qB,QCL9CkC,EAAU,CACZC,OAAQ,CACNC,SAAS,GAEXC,SAAU,CACRC,MAAO,CACLpB,OAAQ,IAGZqB,qBAAqB,EACrBC,SAAU,CACRC,KAAM,QACNC,WAAW,EACXC,UAAW,CACTC,MAAO,SAAUC,EAAa3C,GAC5B,OAAOH,IAAQ8C,EAAYC,OAAO9C,OAAO,WAI/C+C,OAAQ,CACNC,MAAO,CACL,CACEC,KAAM,OACNC,KAAM,CACJlD,OAAQ,WACRmD,cAAe,QAIrBC,MAAO,CACL,CACEC,UAAW,CACTjB,SAAS,GAEXkB,MAAO,CAELC,SAAU,SAAUT,EAAOU,EAAOC,GAChC,OAAO1D,IAAQ+C,GAAO9C,OAAO,YASnC0D,EAAY,SAACC,GAAiC,IAE9CC,EAFuBC,EAAsB,uDAAZ,QAC/BC,EAAa,GAEfC,EAAWJ,EAASE,GACxB,IAAK,IAAIG,KAAQD,EAAU,CACvB,GAAGH,EAAc,CACb,IAAMK,EAAY,CACdC,EAAGF,EACHG,EAAGJ,EAASC,GAAQJ,GAExBE,EAAWM,KAAKH,GAEpBL,EAAgBG,EAASC,GAE7B,OAAOF,GAwCIO,MArCf,YAA2C,IAAD,IAAtBR,iBAAsB,MAAV,QAAU,IACdS,mBAAS,IADK,mBAC/BpE,EAD+B,KACzBqE,EADyB,KAkBtC,OAfAC,qBAAU,YACS,uCAAG,sBAAAnE,EAAA,sEACRoE,MAAM,8DACXC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,IAAIC,EAAWpB,EAAUmB,EAAOhB,GAChCU,EAAQO,MALE,2CAAH,qDAQfC,KACD,CAAClB,IAMA,+BACS,OAAJ3D,QAAI,IAAJA,OAAA,EAAAA,EAAM8E,QAAS,GAChB,cAAC,OAAD,CAAM9E,KAAM,CACR+E,SAAU,CACP,CACHC,gBAAiB,yBACjBC,YAAa,UACbjF,KAAMA,KAIVgC,QAASA,OCkBNkD,MA3Gf,WAAgB,IAAD,EAEqBd,mBAAS,IAF9B,mBAENrC,EAFM,KAEKoD,EAFL,OAGiBf,mBAAS,aAH1B,mBAGN5D,EAHM,KAGG4E,EAHH,OAIyBhB,mBAAS,IAJlC,mBAINzD,EAJM,KAIO0E,EAJP,OAKqBjB,mBAAS,IAL9B,mBAKNkB,EALM,KAKKC,EALL,OAMqBnB,mBAAS,CAAExD,IAAK,QAAS4E,IAAK,QANnD,mBAMNC,EANM,KAMKC,EANL,OAOiBtB,mBAAS,GAP1B,mBAONuB,EAPM,KAOGC,EAPH,OAQiBxB,mBAAS,IAR1B,mBAQNyB,EARM,KAQGC,EARH,OASqB1B,mBAAS,SAT9B,mBASN9D,EATM,KASKyF,EATL,KAYbzB,qBAAU,WACRC,MAAM,sCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAxE,GACJqF,EAAerF,QAEhB,IAEHsE,qBAAU,YACU,uCAAG,sBAAAnE,EAAA,sEACboE,MAAM,4CACXC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACxE,GACL,IAAM+B,EAAY/B,EAAKO,KAAI,SAAAC,GAAO,MAAK,CACrCwF,KAAMxF,EAAQA,QACdoC,MAAOpC,EAAQG,YAAYsF,SAEvBhG,EAAaF,EAASC,GAC5BmF,EAAapD,GACbwD,EAAatF,GACb6F,EAAW9F,MAXM,2CAAH,qDAelBkG,KACC,IAEH,IAAMC,EAAe,uCAAG,WAAOC,GAAP,iBAAAjG,EAAA,6DAChBkG,EAAcD,EAAEE,OAAO1D,MACvBhB,EAAsB,cAAhByE,EACZ,qCADY,mDAEgCA,GAJtB,SAMhB9B,MAAM3C,GACX4C,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACxE,GACLqF,EAAerF,GACfoF,EAAWiB,GACRrG,EAAKW,aACN+E,EAAa,CAAC1F,EAAKW,YAAYC,IAAKZ,EAAKW,YAAYE,OACrD+E,EAAW,KAEXF,EAAa,CAAC,QAAS,QACvBE,EAAW,OAhBO,2CAAH,sDAsBrB,OACE,sBAAK7G,UAAU,MAAf,UACE,sBAAKA,UAAU,YAAf,UACA,sBAAKA,UAAU,cAAf,UACE,kDACA,cAACwH,EAAA,EAAD,CAAaxH,UAAU,gBAAvB,SACE,eAACyH,EAAA,EAAD,CACAC,QAAQ,WACR7D,MAAOpC,EACPkG,SAAUP,EAHV,UAKE,cAACQ,EAAA,EAAD,CAAU/D,MAAM,YAAhB,uBAEEb,EAAUxB,KAAI,SAAAC,GAAO,OACnB,cAACmG,EAAA,EAAD,CAAU/D,MAAOpC,EAAQoC,MAAzB,SAAiCpC,EAAQwF,kBAQnD,sBAAKjH,UAAU,aAAf,UACE,cAAC,EAAD,CAAUG,QAAS,SAACkH,GAAD,OAAOL,EAAa,UAAUrH,MAAM,oBAAoBC,MAAOgB,EAAgBgB,EAAYiG,YAAahI,MAAOe,EAAgBgB,EAAYhC,SAC9J,cAAC,EAAD,CAAUO,QAAS,SAACkH,GAAD,OAAOL,EAAa,cAAcrH,MAAM,YAAYC,MAAOgB,EAAgBgB,EAAYkG,gBAAiBjI,MAAOe,EAAgBgB,EAAYlB,aAC9J,cAAC,EAAD,CAAUP,QAAS,SAACkH,GAAD,OAAOL,EAAa,WAAWrH,MAAM,SAASC,MAAOgB,EAAgBgB,EAAYmG,aAAclI,MAAOe,EAAgBgB,EAAYjB,aAIvJ,cAAC,EAAD,CAAKY,UAAWA,EAAWI,OAAQ+E,EAAWnE,KAAMqE,EAAS3F,KAAM6F,OAGnE,cAAC/G,EAAA,EAAD,CAAMC,UAAU,aAAhB,SACE,eAACI,EAAA,EAAD,WACE,wDACA,cAAC,EAAD,CAAO4C,UAAWuD,IAClB,iDAAoBhF,KACpB,cAAC,EAAD,CAAWqD,UAAWrD,aChGjByG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBzC,MAAK,YAAkD,IAA/C0C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.f8e838b3.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Card, CardContent, Typography} from '@material-ui/core';\r\nimport './InfoBox.css';\r\n\r\n\r\nfunction InfoBox({title, cases, total, ...props}) {\r\n    return (\r\n        <div>\r\n            <Card className='infoBox' styles={{flex: 0.2}} onClick={props.onClick}>\r\n                <CardContent>\r\n                <Typography className='infoBox__title' color='textSecondary'>{title}</Typography>\r\n                <h2 className='infoBox__cases'>{cases} cases today</h2>\r\n                <Typography className='infoBox__total' color='textSecondary'>{total} total</Typography>\r\n                </CardContent>\r\n            </Card>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    multiplier: 400,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    multiplier: 400,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    multiplier: 400,\r\n  },\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    sortedData.sort((a, b) => {\r\n        return a.cases > b.cases? -1: 1;\r\n    })\r\n    return sortedData\r\n}   \r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.1}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      {console.log(casesTypeColors[casesType].hex)}\r\n    </Circle>\r\n  ));","import React from 'react';\r\nimport { MapContainer, TileLayer, useMap } from 'react-leaflet';\r\nimport './Map.css';\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction ChangeView({ center, zoom }) {\r\n    const map = useMap();\r\n    map.setView(center, zoom);\r\n    return null;\r\n}\r\n\r\nfunction Map({center, zoom, data, casesType}) {\r\n    return (\r\n        <div className=\"map\">\r\n            {console.log(data)}\r\n            <MapContainer center={center} zoom={zoom} >\r\n            <TileLayer\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            />\r\n            <ChangeView  center={center} zoom={zoom}/>\r\n            {showDataOnMap(data, casesType)}\r\n        \r\n      </MapContainer>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react';\r\nimport './Table.css';\r\nimport numeral from 'numeral'\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n            {\r\n                countries.map(({country, cases}) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                <td> <strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n                </tr>\r\n                ))\r\n            }\r\n            \r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import { responsiveFontSizes } from '@material-ui/core';\r\nimport {React, useState, useEffect} from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nimport numeral from 'numeral'\r\n\r\n\r\nconst options = {\r\n    legend: {\r\n      display: false,\r\n    },\r\n    elements: {\r\n      point: {\r\n        radius: 0,\r\n      },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n      mode: \"index\",\r\n      intersect: false,\r\n      callbacks: {\r\n        label: function (tooltipItem, data) {\r\n          return numeral(tooltipItem.value).format(\"+0,0\");\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          type: \"time\",\r\n          time: {\r\n            format: \"MM/DD/YY\",\r\n            tooltipFormat: \"ll\",\r\n          },\r\n        },\r\n      ],\r\n      yAxes: [\r\n        {\r\n          gridLines: {\r\n            display: false,\r\n          },\r\n          ticks: {\r\n            // Include a dollar sign in the ticks\r\n            callback: function (value, index, values) {\r\n              return numeral(value).format(\"0a\");\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n\r\n  const chartData = (lineData, chartType='cases') => {\r\n    const dataPoints = [];\r\n    let lastDataPoint;\r\n    var tempData = lineData[chartType];\r\n    for (let date in tempData) {\r\n        if(lastDataPoint){\r\n            const currValue = {\r\n                x: date,\r\n                y: tempData[date] - lastDataPoint\r\n            }\r\n            dataPoints.push(currValue);\r\n        }\r\n        lastDataPoint = tempData[date]\r\n    }\r\n    return dataPoints;\r\n}\r\n\r\nfunction LineGraph({chartType = \"cases\"}) {\r\n    const [data, setdata] = useState({});   \r\n    \r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n            .then(response => response.json())\r\n            .then(datas => {\r\n                let chrtData = chartData(datas, chartType)\r\n                setdata(chrtData);\r\n            })\r\n        }\r\n        fetchData();       \r\n    }, [chartType])\r\n\r\n    \r\n\r\n\r\n    return (\r\n        <div>\r\n            {data?.length > 0 && (\r\n            <Line data={{\r\n                datasets: [\r\n                   {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },   \r\n                ]\r\n            }}\r\n            options={options}\r\n            /> )}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import {useState, useEffect} from 'react';\nimport './App.css';\nimport 'leaflet/dist/leaflet.css';\nimport {FormControl, MenuItem, Select, Card, CardContent} from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport LineGraph from './LineGraph';\nimport {sortData, prettyPrintStat} from './util'\n\nfunction App() {\n\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 37.0902, lng: 0.4796 });\n  const [mapZoom, setMapZoom] = useState(2);\n  const [mapData, setMapData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  \n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response => response.json())\n    .then(data => {\n      setCountryInfo(data);\n    })\n  }, [])\n\n  useEffect(() => {\n    const getCountries = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n        const countries = data.map(country => ({\n          name: country.country,\n          value: country.countryInfo.iso2\n        }));\n        const sortedData = sortData(data);\n        setCountries(countries);\n        setTableData(sortedData);\n        setMapData(data);\n      })\n    }\n\n    getCountries();\n  }, [])\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n    const url = countryCode === 'worldwide' ? \n    'https://disease.sh/v3/covid-19/all' : \n    `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n    .then(response => response.json())\n    .then((data) => {\n      setCountryInfo(data);\n      setCountry(countryCode);\n      if(data.countryInfo){\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      } else {\n        setMapCenter([37.0902, 0.4796]);\n        setMapZoom(2);\n      }\n    })   \n     \n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n      <div className='app__header'>\n        <h1>Covid 19 tracker</h1>\n        <FormControl className='app__dropdown'>\n          <Select\n          variant='outlined'\n          value={country}\n          onChange={onCountryChange}\n          >\n            <MenuItem value='worldwide'>Worldwide</MenuItem>\n            {\n              countries.map(country => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))\n            }\n\n          </Select>\n        </FormControl>\n      </div>\n\n      <div className='app__stats'>\n        <InfoBox  onClick={(e) => setCasesType(\"cases\")} title=\"Coronavirus cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)}></InfoBox>\n        <InfoBox  onClick={(e) => setCasesType(\"recovered\")} title=\"Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)}></InfoBox>\n        <InfoBox  onClick={(e) => setCasesType(\"deaths\")} title=\"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)}></InfoBox>\n\n      </div>\n\n      <Map casesType={casesType} center={mapCenter} zoom={mapZoom} data={mapData}/>\n\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3> Live cases by country</h3>\n          <Table countries={tableData} />\n          <h3> Worldwide new {casesType}</h3>\n          <LineGraph chartType={casesType}/>\n        </CardContent>\n      </Card>\n        \n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}